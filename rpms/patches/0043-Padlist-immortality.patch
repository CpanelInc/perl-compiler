From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Todd Rinaldo <toddr@cpan.org>
Date: Fri, 9 Jun 2017 18:03:38 -0500
Subject: [PATCH 43/43] Padlist immortality

---
 SOURCES/perl/ext/B/B.xs | 6 +++++-
 SOURCES/perl/pad.c      | 3 ++-
 SOURCES/perl/pad.h      | 3 ++-
 3 files changed, 9 insertions(+), 3 deletions(-)

diff --git a/SOURCES/perl/ext/B/B.xs b/SOURCES/perl/ext/B/B.xs
index b4b6a40..23b056e 100644
--- a/SOURCES/perl/ext/B/B.xs
+++ b/SOURCES/perl/ext/B/B.xs
@@ -2279,6 +2279,7 @@ PadnamelistARRAYelt(pnl, idx)
 
 MODULE = B	PACKAGE = B::PADNAME	PREFIX = Padname
 
+#define xpadl_id_bitfield 0xF0000
 #define PN_type_ix \
 	sv_SVp | STRUCT_OFFSET(struct padname,xpadn_type_u.xpadn_typestash)
 #define PN_ourstash_ix \
@@ -2294,7 +2295,7 @@ MODULE = B	PACKAGE = B::PADNAME	PREFIX = Padname
 #define PNL_refcnt_ix \
 	sv_U32p | STRUCT_OFFSET(struct padnamelist, xpadnl_refcnt)
 #define PL_id_ix \
-	sv_U32p | STRUCT_OFFSET(struct padlist, xpadl_id)
+	xpadl_id_bitfield | 0
 #define PL_outid_ix \
 	sv_U32p | STRUCT_OFFSET(struct padlist, xpadl_outid)
 
@@ -2327,6 +2328,9 @@ PadnameTYPE(pn)
 	case (U8)(sv_U8p >> 16):
 	    ret = sv_2mortal(newSVuv(*((U8 *)ptr)));
 	    break;
+    case (U8)(xpadl_id_bitfield >>16):
+        ret = sv_2mortal(newSVuv(((PADLIST*) ptr)->xpadl_id));
+        break;
 	default:
 	    NOT_REACHED;
 	}
diff --git a/SOURCES/perl/pad.c b/SOURCES/perl/pad.c
index 9773a25..45fd20d 100644
--- a/SOURCES/perl/pad.c
+++ b/SOURCES/perl/pad.c
@@ -458,7 +458,7 @@ Perl_cv_undef_flags(pTHX_ CV *cv, U32 flags)
 	    PadnamelistREFCNT_dec(names);
 	}
 	if (PadlistARRAY(padlist)) Safefree(PadlistARRAY(padlist));
-	Safefree(padlist);
+    if(!padlist->immortal) Safefree(padlist);
 	CvPADLIST_set(&cvbody, NULL);
     }
     else if (CvISXSUB(&cvbody))
@@ -2502,6 +2502,7 @@ Perl_padlist_dup(pTHX_ PADLIST *srcpad, CLONE_PARAMS *param)
     Newx(dstpad, 1, PADLIST);
     ptr_table_store(PL_ptr_table, srcpad, dstpad);
     PadlistMAX(dstpad) = max;
+    dstpad.immortal = 0; /* This will be safe to be freed later. */
     Newx(PadlistARRAY(dstpad), max + 1, PAD *);
 
     PadlistARRAY(dstpad)[0] = (PAD *)
diff --git a/SOURCES/perl/pad.h b/SOURCES/perl/pad.h
index 7ed1033..7b6b4b7 100644
--- a/SOURCES/perl/pad.h
+++ b/SOURCES/perl/pad.h
@@ -42,7 +42,8 @@ struct padlist {
 	    PAD * pad_2;        /* maybe unalloced */
 	} * xpadlarr_dbg;       /* for use with a C debugger only */
     } xpadl_arr;
-    U32		xpadl_id;	/* Semi-unique ID, shared between clones */
+    PERL_BITFIELD32 immortal:1; /* B::C needs this field to assure the padlist is never freed */
+    PERL_BITFIELD32 xpadl_id:31;	/* Semi-unique ID, shared between clones */
     U32		xpadl_outid;	/* ID of outer pad */
 };
 
