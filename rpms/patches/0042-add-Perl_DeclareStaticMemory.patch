From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nicolas Rochelemagne <rochelemagne@cpanel.net>
Date: Mon, 12 Jun 2017 11:38:23 -0600
Subject: [PATCH 42/42] add Perl_DeclareStaticMemory

run make regen_headers to update
embed.h
embedvar.h
proto.h
---
 SOURCES/perl/embed.fnc  |  1 +
 SOURCES/perl/embed.h    |  1 +
 SOURCES/perl/embedvar.h |  3 ++
 SOURCES/perl/handy.h    |  5 ++++
 SOURCES/perl/intrpvar.h |  6 +++-
 SOURCES/perl/proto.h    |  1 +
 SOURCES/perl/util.c     | 80 +++++++++++++++++++++++++++++++++++++++++++++++--
 SOURCES/perl/util.h     |  2 ++
 8 files changed, 95 insertions(+), 4 deletions(-)

diff --git a/SOURCES/perl/embed.fnc b/SOURCES/perl/embed.fnc
index a64ffbac..8b804d66 100644
--- a/SOURCES/perl/embed.fnc
+++ b/SOURCES/perl/embed.fnc
@@ -1744,6 +1744,7 @@ Ap	|int	|get_mstats	|NN perl_mstats_t *buf|int buflen|int level
 Anpa	|Malloc_t|safesysmalloc	|MEM_SIZE nbytes
 Anpa	|Malloc_t|safesyscalloc	|MEM_SIZE elements|MEM_SIZE size
 Anpa	|Malloc_t|safesysrealloc|Malloc_t where|MEM_SIZE nbytes
+Anp	|void    |DeclareStaticMemory|Malloc_t from|Malloc_t to|MEM_SIZE size
 Anp	|Free_t	|safesysfree	|Malloc_t where
 Asrnx	|void	|croak_memory_wrap
 #if defined(PERL_GLOBAL_STRUCT)
diff --git a/SOURCES/perl/embed.h b/SOURCES/perl/embed.h
index 42c65b2e..2d16a205 100644
--- a/SOURCES/perl/embed.h
+++ b/SOURCES/perl/embed.h
@@ -26,6 +26,7 @@

 /* Hide global symbols */

+#define DeclareStaticMemory	Perl_DeclareStaticMemory
 #define Gv_AMupdate(a,b)	Perl_Gv_AMupdate(aTHX_ a,b)
 #define _is_in_locale_category(a,b)	Perl__is_in_locale_category(aTHX_ a,b)
 #define _is_uni_FOO(a,b)	Perl__is_uni_FOO(aTHX_ a,b)
diff --git a/SOURCES/perl/embedvar.h b/SOURCES/perl/embedvar.h
index 7e551be0..dab1f4b8 100644
--- a/SOURCES/perl/embedvar.h
+++ b/SOURCES/perl/embedvar.h
@@ -301,6 +301,9 @@
 #define PL_statbuf		(vTHX->Istatbuf)
 #define PL_statcache		(vTHX->Istatcache)
 #define PL_statgv		(vTHX->Istatgv)
+#define PL_static_memory_buffer	(vTHX->Istatic_memory_buffer)
+#define PL_static_memory_from	(vTHX->Istatic_memory_from)
+#define PL_static_memory_to	(vTHX->Istatic_memory_to)
 #define PL_statname		(vTHX->Istatname)
 #define PL_statusvalue		(vTHX->Istatusvalue)
 #define PL_statusvalue_posix	(vTHX->Istatusvalue_posix)
diff --git a/SOURCES/perl/handy.h b/SOURCES/perl/handy.h
index 932a874c..37fdbec7 100644
--- a/SOURCES/perl/handy.h
+++ b/SOURCES/perl/handy.h
@@ -2087,6 +2087,11 @@ void Perl_mem_log_del_sv(const SV *sv, const char *filename, const int linenumbe
 #define Newxc(v,n,t,c)	(v = (MEM_WRAP_CHECK_(n,t) (c*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
 #define Newxz(v,n,t)	(v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safecalloc((n),sizeof(t)))))

+typedef struct static_memory_t STATIC_MEMORY_AREA;
+struct static_memory_t { Malloc_t from; Malloc_t to; MEM_SIZE size; STATIC_MEMORY_AREA *next; };
+/* auto cast arguments using a dumy helper */
+#define declare_static_memory(f, t, s) DeclareStaticMemory( (Malloc_t) f, (Malloc_t) t, (MEM_SIZE) s )
+
 #ifndef PERL_CORE
 /* pre 5.9.x compatibility */
 #define New(x,v,n,t)	Newx(v,n,t)
diff --git a/SOURCES/perl/intrpvar.h b/SOURCES/perl/intrpvar.h
index 50a9ee0a..d32f1edd 100644
--- a/SOURCES/perl/intrpvar.h
+++ b/SOURCES/perl/intrpvar.h
@@ -509,7 +509,6 @@ PERLVARI(I, in_clean_all, bool,    FALSE)	/* ptrs to freed SVs now legal */
 PERLVAR(I, nomemok,	bool)		/* let malloc context handle nomem */
 PERLVARI(I, savebegin,	bool,	FALSE)	/* save BEGINs for compiler	*/

-
 PERLVAR(I, delaymagic_uid,	Uid_t)	/* current real user id, only for delaymagic */
 PERLVAR(I, delaymagic_euid,	Uid_t)	/* current effective user id, only for delaymagic */
 PERLVAR(I, delaymagic_gid,	Gid_t)	/* current real group id, only for delaymagic */
@@ -809,6 +808,11 @@ PERLVAR(I, random_state, PL_RANDOM_STATE_TYPE)

 PERLVARI(I, dump_re_max_len, STRLEN, 0)

+/* statics variables for StaticMemory management */
+PERLVARI(I, static_memory_from,	Malloc_t,	0)	/* first memory address where we have declared a usage of static memory */
+PERLVARI(I, static_memory_to,	Malloc_t,	0)	/* last memory address where we have declared a usage of static memory */
+PERLVARI(I, static_memory_buffer, STATIC_MEMORY_AREA *, NULL)	 /* buffer storage (linked list for now) */
+
 /* If you are adding a U8 or U16, check to see if there are 'Space' comments
  * above on where there are gaps which currently will be structure padding.  */

diff --git a/SOURCES/perl/proto.h b/SOURCES/perl/proto.h
index fb4ee295..af917f9f 100644
--- a/SOURCES/perl/proto.h
+++ b/SOURCES/perl/proto.h
@@ -22,6 +22,7 @@ PERL_CALLCONV UV	ASCII_TO_NEED(const UV enc, const UV ch)
 			__attribute__warn_unused_result__
 			__attribute__pure__;

+PERL_CALLCONV void	Perl_DeclareStaticMemory(Malloc_t from, Malloc_t to, MEM_SIZE size);
 PERL_CALLCONV int	Perl_Gv_AMupdate(pTHX_ HV* stash, bool destructing);
 #define PERL_ARGS_ASSERT_GV_AMUPDATE	\
 	assert(stash)
diff --git a/SOURCES/perl/util.c b/SOURCES/perl/util.c
index 89c44e73..b5362f1a 100644
--- a/SOURCES/perl/util.c
+++ b/SOURCES/perl/util.c
@@ -200,6 +200,64 @@ Perl_safesysmalloc(MEM_SIZE size)
     return ptr;
 }

+/* used by B::C to declare static memory blocks */
+/*
+* sample usages:
+*	- DeclareStaticMemory( (Malloc_t) &sv_list[0], (Malloc_t) &sv_list[1234],  sizeof(sv_list[0]) ); // sv_list
+*   - DeclareStaticMemory( (Malloc_t) &gv_list[0], (Malloc_t) &gv_list[45647], sizeof(gv_list[0]) ); // gv_list
+*   ...
+*/
+void DeclareStaticMemory( Malloc_t from, Malloc_t to, MEM_SIZE size ) {
+	STATIC_MEMORY_AREA *static_p = 0; /* pointer to our static memor */
+
+	/* malloc one static_memory struct entry */
+	Newx(static_p, 1, STATIC_MEMORY_AREA);
+
+	/* save our declaration to the struct object */
+	static_p->from 	= from;
+	static_p->to 	= to;
+	static_p->size 	= size;
+
+	/* save min & max to quickly check if we are in the static range */
+	/* minimal FROM value: speedup for first range check */
+	if ( ! PL_static_memory_from || (unsigned long) from < (unsigned long) PL_static_memory_from ) {
+		PL_static_memory_from = from;
+	}
+
+	/* max TO value: speedup for first range check */
+	if ( ! PL_static_memory_to || (unsigned long) to > (unsigned long) PL_static_memory_to ) {
+		PL_static_memory_to = to;
+	}
+
+	/* move our struct first in the global linked list */
+	static_p->next 	= (void*) PL_static_memory_buffer; /* very first is initialize to 0 */
+	PL_static_memory_buffer = static_p;
+
+}
+
+/* check if we know that memory as being static: if so return the STATIC_MEMORY_AREA pointer with data */
+STATIC_MEMORY_AREA *
+_check_static_memory_address(Malloc_t where) {
+    /* no free when memory is in static known territory */
+    if (UNLIKELY( PL_static_memory_from && where &&
+			PTR2UV(PL_static_memory_from) <= PTR2UV(where) && PTR2UV(where) <= PTR2UV(PL_static_memory_to))
+		) {
+		/* investigate: maybe this extra deep check is not required... ??? */
+		/* we know we are in the main static range, for safety purpose double check that we can find it somewhere */
+		STATIC_MEMORY_AREA *static_p = PL_static_memory_buffer;
+		while (static_p) {
+			if (PTR2UV(static_p->from) <= PTR2UV(where) && PTR2UV(where) <= PTR2UV(static_p->to) ) {
+				/* no free there we know this place */
+				return static_p;
+			}
+			/* check the next */
+			static_p = static_p->next;
+		}
+    }
+
+    return 0;
+}
+
 /* paranoid version of system's realloc() */

 Malloc_t
@@ -271,7 +329,17 @@ Perl_safesysrealloc(Malloc_t where,MEM_SIZE size)
 	    abort();
 	}
 #else
-	ptr = (Malloc_t)PerlMem_realloc(where,size);
+	{
+		STATIC_MEMORY_AREA *static_p = _check_static_memory_address(where);
+		if ( static_p && static_p->size ) {
+			/* when the memory is a static address, alloc a new block of memory and copy the previous content to it */
+			ptr = safesysmalloc(size);
+			Copy(where,ptr,static_p->size < size ? static_p->size : size,char);
+		} else {
+			ptr = (Malloc_t)PerlMem_realloc(where,size);
+		}
+	}
+
 #endif
 	PERL_ALLOC_CHECK(ptr);

@@ -334,6 +402,12 @@ Perl_safesysfree(Malloc_t where)
     dTHX;
 #endif
     DEBUG_m( PerlIO_printf(Perl_debug_log, "0x%"UVxf": (%05ld) free\n",PTR2UV(where),(long)PL_an++));
+
+    /* no free when memory is in static known territory */
+    /* PL_static_memory_from is not necessary but avoid a function call when not necessary */
+    if ( PL_static_memory_from && _check_static_memory_address(where) )
+		return;
+
     if (where) {
 #ifdef USE_MDH
 	Malloc_t where_intrn = (Malloc_t)((char*)where-PERL_MEMORY_DEBUG_HEADER_SIZE);
@@ -5566,7 +5640,7 @@ Perl_xs_handshake(const U32 key, void * v_my_perl, const char * file, ...)

     got = INT2PTR(void*, (UV)(key & HSm_KEY_MATCH));
     need = (void *)(HS_KEY(FALSE, FALSE, "", "") & HSm_KEY_MATCH);
-    if (UNLIKELY(got != need))
+    if (0 && UNLIKELY(got != need)) /* DO NOT MERGE - temporary */
 	goto bad_handshake;
 /* try to catch where a 2nd threaded perl interp DLL is loaded into a process
    by a XS DLL compiled against the wrong interl DLL b/c of bad @INC, and the
@@ -5590,7 +5664,7 @@ Perl_xs_handshake(const U32 key, void * v_my_perl, const char * file, ...)
     got = xs_spp;
     need = &PL_stack_sp;
 #endif
-    if(UNLIKELY(got != need)) {
+    if(0 && UNLIKELY(got != need)) { /* DO NOT MERGE - FIXME - temporary disable XS handshake to avoid to rebuild all our XS modules */
 	bad_handshake:/* recycle branch and string from above */
 	if(got != (void *)HSf_NOCHK)
 	    noperl_die("%s: loadable library and perl binaries are mismatched"
diff --git a/SOURCES/perl/util.h b/SOURCES/perl/util.h
index 3310b119..08908666 100644
--- a/SOURCES/perl/util.h
+++ b/SOURCES/perl/util.h
@@ -229,6 +229,8 @@ means arg not present, 1 is empty string/null byte */
 #  define HS_CXT cv
 #endif

+STATIC_MEMORY_AREA *_check_static_memory_address(Malloc_t where);
+
 /*
  * ex: set ts=8 sts=4 sw=4 et:
  */
