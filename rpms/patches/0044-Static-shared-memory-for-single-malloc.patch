From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nicolas Rochelemagne <rochelemagne@cpanel.net>
Date: Wed, 5 Jul 2017 12:29:41 -0600
Subject: [PATCH 44/44] Static shared memory for single malloc

do not update these files, use make regen_headers
- embed.h
- embedvar.h
- proto.h
---
 SOURCES/perl/embed.fnc  |  1 +
 SOURCES/perl/embed.h    |  1 +
 SOURCES/perl/embedvar.h |  2 ++
 SOURCES/perl/intrpvar.h |  8 ++++++
 SOURCES/perl/perl.h     |  2 +-
 SOURCES/perl/proto.h    |  5 ++++
 SOURCES/perl/util.c     | 76 +++++++++++++++++++++++++++++++++++++++++++++++++
 7 files changed, 94 insertions(+), 1 deletion(-)

diff --git a/SOURCES/perl/embed.fnc b/SOURCES/perl/embed.fnc
index 8b804d66..7ac743a5 100644
--- a/SOURCES/perl/embed.fnc
+++ b/SOURCES/perl/embed.fnc
@@ -1744,6 +1744,7 @@ Ap	|int	|get_mstats	|NN perl_mstats_t *buf|int buflen|int level
 Anpa	|Malloc_t|safesysmalloc	|MEM_SIZE nbytes
 Anpa	|Malloc_t|safesyscalloc	|MEM_SIZE elements|MEM_SIZE size
 Anpa	|Malloc_t|safesysrealloc|Malloc_t where|MEM_SIZE nbytes
+Anpa    |Malloc_t|bc_safesysrealloc|Malloc_t where|MEM_SIZE nbytes
 Anp	|void    |DeclareStaticMemory|Malloc_t from|Malloc_t to|MEM_SIZE size
 Anp	|Free_t	|safesysfree	|Malloc_t where
 Asrnx	|void	|croak_memory_wrap
diff --git a/SOURCES/perl/embed.h b/SOURCES/perl/embed.h
index 2d16a205..74b5eb6d 100644
--- a/SOURCES/perl/embed.h
+++ b/SOURCES/perl/embed.h
@@ -64,6 +64,7 @@
 #define av_store(a,b,c)		Perl_av_store(aTHX_ a,b,c)
 #define av_undef(a)		Perl_av_undef(aTHX_ a)
 #define av_unshift(a,b)		Perl_av_unshift(aTHX_ a,b)
+#define bc_safesysrealloc	Perl_bc_safesysrealloc
 #define block_end(a,b)		Perl_block_end(aTHX_ a,b)
 #define block_gimme()		Perl_block_gimme(aTHX)
 #define block_start(a)		Perl_block_start(aTHX_ a)
diff --git a/SOURCES/perl/embedvar.h b/SOURCES/perl/embedvar.h
index dab1f4b8..3bb36761 100644
--- a/SOURCES/perl/embedvar.h
+++ b/SOURCES/perl/embedvar.h
@@ -304,6 +304,8 @@
 #define PL_static_memory_buffer	(vTHX->Istatic_memory_buffer)
 #define PL_static_memory_from	(vTHX->Istatic_memory_from)
 #define PL_static_memory_to	(vTHX->Istatic_memory_to)
+#define PL_static_shared_memory_position	(vTHX->Istatic_shared_memory_position)
+#define PL_static_shared_memory_table	(vTHX->Istatic_shared_memory_table)
 #define PL_statname		(vTHX->Istatname)
 #define PL_statusvalue		(vTHX->Istatusvalue)
 #define PL_statusvalue_posix	(vTHX->Istatusvalue_posix)
diff --git a/SOURCES/perl/intrpvar.h b/SOURCES/perl/intrpvar.h
index d32f1edd..8ee4526a 100644
--- a/SOURCES/perl/intrpvar.h
+++ b/SOURCES/perl/intrpvar.h
@@ -813,6 +813,14 @@ PERLVARI(I, static_memory_from,	Malloc_t,	0)	/* first memory address where we ha
 PERLVARI(I, static_memory_to,	Malloc_t,	0)	/* last memory address where we have declared a usage of static memory */
 PERLVARI(I, static_memory_buffer, STATIC_MEMORY_AREA *, NULL)	 /* buffer storage (linked list for now) */

+/* static_shared memory variable to use one single malloc at init time then share it (used by custom saferealloc) */
+PERLVARI(I, static_shared_memory_position, STATIC_MEMORY_AREA *, NULL) /* from and to position of the shared memory block
+                                                                            also note that size contains the number of entries in static_shared_memory_table
+                                                                        */
+PERLVARI(I, static_shared_memory_table, STATIC_MEMORY_AREA*, NULL) /* array of STATIC_MEMORY_AREA
+                                                                      to know what is the size hold by a pointer
+                                                                   */
+
 /* If you are adding a U8 or U16, check to see if there are 'Space' comments
  * above on where there are gaps which currently will be structure padding.  */

diff --git a/SOURCES/perl/perl.h b/SOURCES/perl/perl.h
index 161f7147..1b07b1a9 100644
--- a/SOURCES/perl/perl.h
+++ b/SOURCES/perl/perl.h
@@ -982,7 +982,7 @@ EXTERN_C int usleep(unsigned int);
 #else  /* MYMALLOC */
 #  define safemalloc  safesysmalloc
 #  define safecalloc  safesyscalloc
-#  define saferealloc safesysrealloc
+#  define saferealloc bc_safesysrealloc
 #  define safefree    safesysfree
 #  define CHECK_MALLOC_TOO_LATE_FOR(ch)		((void)0)
 #  define CHECK_MALLOC_TAINT(newval)		((void)0)
diff --git a/SOURCES/perl/proto.h b/SOURCES/perl/proto.h
index af917f9f..14de7591 100644
--- a/SOURCES/perl/proto.h
+++ b/SOURCES/perl/proto.h
@@ -22,6 +22,7 @@ PERL_CALLCONV UV	ASCII_TO_NEED(const UV enc, const UV ch)
 			__attribute__warn_unused_result__
 			__attribute__pure__;

+PERL_CALLCONV void	Perl_DeclareSharedMemoryUsage(Malloc_t where, MEM_SIZE size);
 PERL_CALLCONV void	Perl_DeclareStaticMemory(Malloc_t from, Malloc_t to, MEM_SIZE size);
 PERL_CALLCONV int	Perl_Gv_AMupdate(pTHX_ HV* stash, bool destructing);
 #define PERL_ARGS_ASSERT_GV_AMUPDATE	\
@@ -199,6 +200,10 @@ PERL_CALLCONV void	Perl_av_undef(pTHX_ AV *av);
 PERL_CALLCONV void	Perl_av_unshift(pTHX_ AV *av, SSize_t num);
 #define PERL_ARGS_ASSERT_AV_UNSHIFT	\
 	assert(av)
+PERL_CALLCONV Malloc_t	Perl_bc_safesysrealloc(Malloc_t where, MEM_SIZE nbytes)
+			__attribute__malloc__
+			__attribute__warn_unused_result__;
+
 PERL_CALLCONV OP*	Perl_bind_match(pTHX_ I32 type, OP *left, OP *right)
 			__attribute__warn_unused_result__;
 #define PERL_ARGS_ASSERT_BIND_MATCH	\
diff --git a/SOURCES/perl/util.c b/SOURCES/perl/util.c
index 5fb18253..f11a3200 100644
--- a/SOURCES/perl/util.c
+++ b/SOURCES/perl/util.c
@@ -200,6 +200,82 @@ Perl_safesysmalloc(MEM_SIZE size)
     return ptr;
 }

+/*
+	do a basic search in PL_static_shared_memory_table to guess
+	the size of the element hold by a pointer between
+	PL_static_shared_memory_position->from and PL_static_shared_memory_position->to
+	positions.
+
+	Note that the caller is responsible for checking this earlier.
+
+*/
+MEM_SIZE
+_get_size_for_shared_memory_pointer( Malloc_t search ) {
+	int first, last, middle;
+	MEM_SIZE mem = 0; /* size of 0 means we have not found it */
+
+	/* initialize our variables */
+	first = 0;
+	/* we stole the size here to store the number of entries in PL_static_shared_memory_table */
+	last  = (int) PL_static_shared_memory_position->size;
+
+	/* use a relative memory address to the first entry */
+	search = search - PL_static_shared_memory_position->from;
+
+	/* while element not found
+		and we still have something to search (at least one entry in the array)
+	*/
+	while( (first <= last) && (mem == 0) ) {
+	        /* we always start looking from the middle */
+	        middle = (first+last) / 2;
+	        /* check if the current element in middle is the one we are looking foŕ */
+	        if( PL_static_shared_memory_table[middle].from <= search
+				&& search < PL_static_shared_memory_table[middle].to ) {
+	        	int delta = search - PL_static_shared_memory_table[middle].from;
+	        	int modulo = delta % PL_static_shared_memory_table[middle].size;
+	        	if ( modulo == 0 ) { /* need to point to the beginning of the struct */
+	        		return PL_static_shared_memory_table[middle].size;
+	        	}
+	        	/* otherwise we are inside a pointer not malloced by us: there is something wrong ? */
+	        	return 0;
+	        }
+	        else
+			{  /* let's check which side of the table we should investigate */
+				if ( search < PL_static_shared_memory_table[middle].from )
+					last = middle - 1; /* look on the left side */
+	            else
+					first = middle + 1; /* look on the right side */
+			}
+	}
+
+	return mem;
+}
+
+/* B::C wrapper around Perl_safesysrealloc */
+Malloc_t
+Perl_bc_safesysrealloc(Malloc_t where, MEM_SIZE size) {
+	if ( LIKELY( !PL_static_shared_memory_table || !PL_static_shared_memory_position
+		|| where > PL_static_shared_memory_position->to /* check to first as it's most likely to be true */
+		|| where < PL_static_shared_memory_position->from
+		)
+	) {
+		return Perl_safesysrealloc(where, size);
+	} else {
+		MEM_SIZE oldsize = _get_size_for_shared_memory_pointer( where );
+		if ( oldsize ) {
+			Malloc_t newmem;
+			if ( size == 0 ) return NULL; /* nothing to free there return a NULL pointer */
+			Newxz(newmem, size, char); /* malloc a new memory pointer */
+			if ( oldsize > size ) oldsize = size; /* shrink memory (get the min) */
+			Copy(where, newmem, oldsize, char);
+			return newmem;
+		}
+	}
+
+	/* fallback to safesysrealloc */
+	return Perl_safesysrealloc(where, size);
+}
+
 /* used by B::C to declare static memory blocks */
 /*
 * sample usages:
