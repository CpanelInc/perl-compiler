From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nicolas Rochelemagne <rochelemagne@cpanel.net>
Date: Wed, 5 Jul 2017 12:29:41 -0600
Subject: [PATCH 44/44] Static shared memory for single malloc

do not update these files, use make regen_headers
- embed.h
- embedvar.h
- proto.h
---
 SOURCES/perl/embed.fnc  |  2 ++
 SOURCES/perl/embed.h    |  2 ++
 SOURCES/perl/embedvar.h |  2 ++
 SOURCES/perl/handy.h    |  2 ++
 SOURCES/perl/intrpvar.h |  4 ++++
 SOURCES/perl/perl.h     |  2 +-
 SOURCES/perl/proto.h    |  5 +++++
 SOURCES/perl/util.c     | 57 +++++++++++++++++++++++++++++++++++++++++++++++++
 8 files changed, 75 insertions(+), 1 deletion(-)

diff --git a/SOURCES/perl/embed.fnc b/SOURCES/perl/embed.fnc
index 8b804d66..c2dc97af 100644
--- a/SOURCES/perl/embed.fnc
+++ b/SOURCES/perl/embed.fnc
@@ -1744,7 +1744,9 @@ Ap	|int	|get_mstats	|NN perl_mstats_t *buf|int buflen|int level
 Anpa	|Malloc_t|safesysmalloc	|MEM_SIZE nbytes
 Anpa	|Malloc_t|safesyscalloc	|MEM_SIZE elements|MEM_SIZE size
 Anpa	|Malloc_t|safesysrealloc|Malloc_t where|MEM_SIZE nbytes
+Anpa    |Malloc_t|bc_safesysrealloc|Malloc_t where|MEM_SIZE nbytes
 Anp	|void    |DeclareStaticMemory|Malloc_t from|Malloc_t to|MEM_SIZE size
+Anp |void    |DeclareSharedMemoryUsage|Malloc_t where|MEM_SIZE size
 Anp	|Free_t	|safesysfree	|Malloc_t where
 Asrnx	|void	|croak_memory_wrap
 #if defined(PERL_GLOBAL_STRUCT)
diff --git a/SOURCES/perl/embed.h b/SOURCES/perl/embed.h
index 2d16a205..aea9693f 100644
--- a/SOURCES/perl/embed.h
+++ b/SOURCES/perl/embed.h
@@ -26,6 +26,7 @@

 /* Hide global symbols */

+#define DeclareSharedMemoryUsage	Perl_DeclareSharedMemoryUsage
 #define DeclareStaticMemory	Perl_DeclareStaticMemory
 #define Gv_AMupdate(a,b)	Perl_Gv_AMupdate(aTHX_ a,b)
 #define _is_in_locale_category(a,b)	Perl__is_in_locale_category(aTHX_ a,b)
@@ -64,6 +65,7 @@
 #define av_store(a,b,c)		Perl_av_store(aTHX_ a,b,c)
 #define av_undef(a)		Perl_av_undef(aTHX_ a)
 #define av_unshift(a,b)		Perl_av_unshift(aTHX_ a,b)
+#define bc_safesysrealloc	Perl_bc_safesysrealloc
 #define block_end(a,b)		Perl_block_end(aTHX_ a,b)
 #define block_gimme()		Perl_block_gimme(aTHX)
 #define block_start(a)		Perl_block_start(aTHX_ a)
diff --git a/SOURCES/perl/embedvar.h b/SOURCES/perl/embedvar.h
index dab1f4b8..3bb36761 100644
--- a/SOURCES/perl/embedvar.h
+++ b/SOURCES/perl/embedvar.h
@@ -304,6 +304,8 @@
 #define PL_static_memory_buffer	(vTHX->Istatic_memory_buffer)
 #define PL_static_memory_from	(vTHX->Istatic_memory_from)
 #define PL_static_memory_to	(vTHX->Istatic_memory_to)
+#define PL_static_shared_memory_position	(vTHX->Istatic_shared_memory_position)
+#define PL_static_shared_memory_table	(vTHX->Istatic_shared_memory_table)
 #define PL_statname		(vTHX->Istatname)
 #define PL_statusvalue		(vTHX->Istatusvalue)
 #define PL_statusvalue_posix	(vTHX->Istatusvalue_posix)
diff --git a/SOURCES/perl/handy.h b/SOURCES/perl/handy.h
index f9f8ee91..632278cf 100644
--- a/SOURCES/perl/handy.h
+++ b/SOURCES/perl/handy.h
@@ -2091,6 +2091,8 @@ typedef struct static_memory_t { Malloc_t from; Malloc_t to; MEM_SIZE size; stru
 /* auto cast arguments using a dumy helper */
 #define declare_static_memory(f, t, s) DeclareStaticMemory( (Malloc_t) (f), (Malloc_t) (t), (MEM_SIZE) (s) )

+#define declare_shared_memory_usage(w, s) DeclareSharedMemoryUsage( (Malloc_t) (w), (MEM_SIZE) (s) )
+
 #ifndef PERL_CORE
 /* pre 5.9.x compatibility */
 #define New(x,v,n,t)	Newx(v,n,t)
diff --git a/SOURCES/perl/intrpvar.h b/SOURCES/perl/intrpvar.h
index d32f1edd..8e323e9e 100644
--- a/SOURCES/perl/intrpvar.h
+++ b/SOURCES/perl/intrpvar.h
@@ -813,6 +813,10 @@ PERLVARI(I, static_memory_from,	Malloc_t,	0)	/* first memory address where we ha
 PERLVARI(I, static_memory_to,	Malloc_t,	0)	/* last memory address where we have declared a usage of static memory */
 PERLVARI(I, static_memory_buffer, STATIC_MEMORY_AREA *, NULL)	 /* buffer storage (linked list for now) */

+/* static_shared memory variable to use one single malloc at init time then share it (used by custom saferealloc) */
+PERLVARI(I, static_shared_memory_position, STATIC_MEMORY_AREA *, NULL) /* from and to position of the shared memory block */
+PERLVARI(I, static_shared_memory_table, HV*, NULL) /* hash containing all informations for the size attributed for each element/pointer this is an HV */
+
 /* If you are adding a U8 or U16, check to see if there are 'Space' comments
  * above on where there are gaps which currently will be structure padding.  */

diff --git a/SOURCES/perl/perl.h b/SOURCES/perl/perl.h
index 161f7147..1b07b1a9 100644
--- a/SOURCES/perl/perl.h
+++ b/SOURCES/perl/perl.h
@@ -982,7 +982,7 @@ EXTERN_C int usleep(unsigned int);
 #else  /* MYMALLOC */
 #  define safemalloc  safesysmalloc
 #  define safecalloc  safesyscalloc
-#  define saferealloc safesysrealloc
+#  define saferealloc bc_safesysrealloc
 #  define safefree    safesysfree
 #  define CHECK_MALLOC_TOO_LATE_FOR(ch)		((void)0)
 #  define CHECK_MALLOC_TAINT(newval)		((void)0)
diff --git a/SOURCES/perl/proto.h b/SOURCES/perl/proto.h
index af917f9f..14de7591 100644
--- a/SOURCES/perl/proto.h
+++ b/SOURCES/perl/proto.h
@@ -22,6 +22,7 @@ PERL_CALLCONV UV	ASCII_TO_NEED(const UV enc, const UV ch)
 			__attribute__warn_unused_result__
 			__attribute__pure__;

+PERL_CALLCONV void	Perl_DeclareSharedMemoryUsage(Malloc_t where, MEM_SIZE size);
 PERL_CALLCONV void	Perl_DeclareStaticMemory(Malloc_t from, Malloc_t to, MEM_SIZE size);
 PERL_CALLCONV int	Perl_Gv_AMupdate(pTHX_ HV* stash, bool destructing);
 #define PERL_ARGS_ASSERT_GV_AMUPDATE	\
@@ -199,6 +200,10 @@ PERL_CALLCONV void	Perl_av_undef(pTHX_ AV *av);
 PERL_CALLCONV void	Perl_av_unshift(pTHX_ AV *av, SSize_t num);
 #define PERL_ARGS_ASSERT_AV_UNSHIFT	\
 	assert(av)
+PERL_CALLCONV Malloc_t	Perl_bc_safesysrealloc(Malloc_t where, MEM_SIZE nbytes)
+			__attribute__malloc__
+			__attribute__warn_unused_result__;
+
 PERL_CALLCONV OP*	Perl_bind_match(pTHX_ I32 type, OP *left, OP *right)
 			__attribute__warn_unused_result__;
 #define PERL_ARGS_ASSERT_BIND_MATCH	\
diff --git a/SOURCES/perl/util.c b/SOURCES/perl/util.c
index 5fb18253..2443c529 100644
--- a/SOURCES/perl/util.c
+++ b/SOURCES/perl/util.c
@@ -200,6 +200,63 @@ Perl_safesysmalloc(MEM_SIZE size)
     return ptr;
 }

+void
+DeclareSharedMemoryUsage( Malloc_t where, MEM_SIZE size ) {
+	STRLEN klen;
+	char key[24] = {0};
+
+	if ( !PL_static_shared_memory_table ) {
+		U32 max;
+		PL_static_shared_memory_table = newHV();
+		max = HvMAX(PL_static_shared_memory_table);
+		if (!HvARRAY(PL_static_shared_memory_table)) {
+			char *array;
+			Newxz(array, PERL_HV_ARRAY_ALLOC_BYTES(max + 1), char);
+			HvARRAY(PL_static_shared_memory_table) = (HE**)array;
+		}
+	}
+
+	my_snprintf(key, sizeof(key), "0x%"UVxf"", PTR2UV(where) );
+	klen = strlen(key);
+
+	/* let's store the size (m)allocated for that pointer in one hash */
+	hv_store((HV*) PL_static_shared_memory_table, key, klen, newSVuv(size), 0);
+}
+
+/* B::C wrapper around Perl_safesysrealloc */
+Malloc_t
+Perl_bc_safesysrealloc(Malloc_t where,MEM_SIZE size) {
+	if ( LIKELY( !PL_static_shared_memory_table || !PL_static_shared_memory_position
+		|| ( where < PL_static_shared_memory_position->from || where > PL_static_shared_memory_position->to )
+		)
+	) { /* FIXME add min and max check */
+		return Perl_safesysrealloc(where, size);
+	} else {
+		STRLEN klen;
+		SV **svp;
+		char key[24] = {0};
+
+		my_snprintf(key, sizeof(key), "0x%"UVxf"", PTR2UV(where) );
+		klen = strlen(key);
+
+		svp = hv_fetch(PL_static_shared_memory_table, key, klen, FALSE);
+		if ( svp && *svp ) {
+			Malloc_t newmem;
+			MEM_SIZE oldsize;
+			/* TODO: deals with size == 0 */
+			/* do something there... */
+			Newxz(newmem, size, char);
+			oldsize = (UV)(SvIVX(*svp));
+			if ( oldsize > size ) oldsize = size; /* shrink memory */
+			Copy(where, newmem, oldsize, char);
+			return newmem;
+		}
+	}
+
+	/* fallback */
+	return Perl_safesysrealloc(where, size);
+}
+
 /* used by B::C to declare static memory blocks */
 /*
 * sample usages:
